char boardList[20][10] =    {{'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'},
                             {'i', 'i', 'i', 'i', 'g', 'z', 'g', 'g', 'g', 'e'},
                             {'l', 'o', 'o', 'j', 'z', 'z', 's', 'l', 'l', 'e'},
                             {'l', 'o', 'o', 'j', 'z', 't', 's', 's', 'l', 'e'},
                             {'l', 'l', 'j', 'j', 't', 't', 't', 's', 'l', 'e'}};
                             
sf::RectangleShape tile(sf::Vector2f(25, 25)); //singular tile shape used to draw the board

for (int x = 0; x < 20; ++x) {
            for (int i = 0; i < 10; ++i) {

                if (boardList[x][i] != 'e') { //checks to ensure the tile isn't empty before checking to see how it's filled.

                    lineFill++;
                    tile.setPosition(i * gridSize, x * gridSize); //sets the position of this instance of tile

                    switch (boardList[x][i]) {

                    case 't':                    //if current searched tile in array is equal to t, make tiles texture the T Tetromino texture
                        tile.setTexture(&tileT); //it does this for all filled tile types
                        break;
                    case 'i':
                        tile.setTexture(&tileI);
                        break;
                    case 'o':
                        tile.setTexture(&tileO);
                        break;
                    case 's':
                        tile.setTexture(&tileS);
                        break;
                    case 'z':
                        tile.setTexture(&tileZ);
                        break;
                    case 'l':
                        tile.setTexture(&tileL);
                        break;
                    case 'j':
                        tile.setTexture(&tileJ);
                        break;
                    case 'g':
                        tile.setTexture(&tileG);
                        break;
                    }

                    window.draw(tile);
                    //draws an instance of tile after leaving the loop to check for the value of boardList, but still in the not empty if statement
                    //this means a new shape won't be drawn unless the checked tile isn't empty.
                }}

            if(lineFill == 10){
                clearLines(x);
                shiftLines(x);
            }

            lineFill = 0;
        }
        
void clearLines(int row){ //empties the row currently being accessed 
    for (int a = 0; a != 10; a++) {
        boardList[row][a] = 'e';}
}

void shiftLines(int lineShift) { //code that moves lines down
    for (lineShift; lineShift !=1; lineShift--){ //for loop deincrementing lineShift as it goes. moving it up the board.
        for (int a = 0; a != 10; a++) { //for loop makes the row being accessed the one above it, then empties that line.
            boardList[lineShift][a] = boardList[lineShift-1][a];
            boardList[lineShift-1][a] = 'e';
